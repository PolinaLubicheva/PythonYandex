{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Задание A\n",
    "try:\n",
    "    func()\n",
    "except Exception as error:\n",
    "    print(type(error).__name__)\n",
    "else:\n",
    "    print('No Exceptions')   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Задание B\n",
    "try:\n",
    "    func('2', None)\n",
    "except ValueError:\n",
    "    print('Ура! Ошибка!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Задание C\n",
    "class Broken:\n",
    "    def __repr__(self):\n",
    "        raise Exception\n",
    "\n",
    "\n",
    "try:\n",
    "    a = Broken()\n",
    "    func(a)\n",
    "except Exception:\n",
    "    print('Ура! Ошибка!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Задание D\n",
    "def only_positive_even_sum(a, b):\n",
    "    if not (isinstance(a, int) and isinstance(b, int)):\n",
    "        raise TypeError\n",
    "    if not (a > 0 and not a % 2) or not (b > 0 and not b % 2):\n",
    "        raise ValueError\n",
    "    return a + b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Задание E\n",
    "def merge(a, b):\n",
    "    try:\n",
    "        iterator_1 = iter(a)\n",
    "        iterator_2 = iter(b)\n",
    "    except TypeError:\n",
    "        raise StopIteration\n",
    "    if not (all(isinstance(i, type(a[0])) for i in a) and all(isinstance(i, type(a[0])) for i in b)):\n",
    "        raise TypeError\n",
    "    if list(a) != sorted(a) or list(b) != sorted(b):\n",
    "        raise ValueError\n",
    "    c = list(a) + list(b)\n",
    "    c.sort()\n",
    "    return tuple(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Задание F\n",
    "class InfiniteSolutionsError(Exception):\n",
    "    pass\n",
    "\n",
    "\n",
    "class NoSolutionsError(Exception):\n",
    "    pass\n",
    "\n",
    "\n",
    "def find_roots(a, b, c):\n",
    "    if sum(1 for i in (a, b, c) if type(i) not in (int, float)):\n",
    "        raise TypeError\n",
    "    elif not a and not b and not c:\n",
    "        raise InfiniteSolutionsError\n",
    "    elif not a and not b and c or b ** 2 < 4 * a * c:\n",
    "        raise NoSolutionsError\n",
    "    elif b ** 2 == 4 * a * c:\n",
    "        return -b / (2 * a), -b / (2 * a)\n",
    "    elif not a:\n",
    "        return -c / b\n",
    "    else:\n",
    "        roots = [(-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a), (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)]\n",
    "        roots.sort()\n",
    "        return roots[0], roots[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Задание G\n",
    "class CyrillicError(Exception):\n",
    "    pass\n",
    "\n",
    "\n",
    "class CapitalError(Exception):\n",
    "    pass\n",
    "\n",
    "\n",
    "def name_validation(name):\n",
    "    if not isinstance(name, str):\n",
    "        raise TypeError\n",
    "    if sum(i.lower() not in 'абвгдеёжзийклмнопрстуфхцчшщьыъэюя' for i in name):\n",
    "        raise CyrillicError\n",
    "    if name != name.lower().capitalize():\n",
    "        raise CapitalError\n",
    "    return name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Задание H\n",
    "class BadCharacterError(Exception):\n",
    "    pass\n",
    "\n",
    "\n",
    "class StartsWithDigitError(Exception):\n",
    "    pass\n",
    "\n",
    "\n",
    "def username_validation(username):\n",
    "    if not isinstance(username, str):\n",
    "        raise TypeError\n",
    "    if sum((i.lower() not in '0123456789_abcdefghijklmnopqrstuvwxyz') for i in username):\n",
    "        raise BadCharacterError\n",
    "    if username[0].isdigit():\n",
    "        raise StartsWithDigitError\n",
    "    return username"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Задание I\n",
    "class BadCharacterError(Exception):\n",
    "    pass\n",
    "\n",
    "\n",
    "class StartsWithDigitError(Exception):\n",
    "    pass\n",
    "\n",
    "\n",
    "class CyrillicError(Exception):\n",
    "    pass\n",
    "\n",
    "\n",
    "class CapitalError(Exception):\n",
    "    pass\n",
    "\n",
    "\n",
    "def name_validation(name):\n",
    "    if not isinstance(name, str):\n",
    "        raise TypeError\n",
    "    if sum(i.lower() not in 'абвгдеёжзийклмнопрстуфхцчшщьыъэюя' for i in name):\n",
    "        raise CyrillicError\n",
    "    if name != name.lower().capitalize():\n",
    "        raise CapitalError\n",
    "    return name\n",
    "\n",
    "\n",
    "def username_validation(username):\n",
    "    if not isinstance(username, str):\n",
    "        raise TypeError\n",
    "    if sum((i.lower() not in '0123456789_abcdefghijklmnopqrstuvwxyz') for i in username):\n",
    "        raise BadCharacterError\n",
    "    if username[0].isdigit():\n",
    "        raise StartsWithDigitError\n",
    "    return username\n",
    "\n",
    "\n",
    "def user_validation(**kwargs):\n",
    "    if [i for i in kwargs] != ['last_name', 'first_name', 'username'] or len(kwargs) != 3:\n",
    "        raise KeyError\n",
    "    if any(not isinstance(k, str) for k in kwargs.values()):\n",
    "        raise TypeError\n",
    "    kwargs['last_name'] = name_validation(kwargs['last_name'])\n",
    "    kwargs['first_name'] = name_validation(kwargs['first_name'])\n",
    "    kwargs['username'] = username_validation(kwargs['username'])\n",
    "    return kwargs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Задание J\n",
    "import hashlib\n",
    "\n",
    "\n",
    "class MinLengthError(Exception):\n",
    "    pass\n",
    "\n",
    "\n",
    "class PossibleCharError(Exception):\n",
    "    pass\n",
    "\n",
    "\n",
    "class NeedCharError(Exception):\n",
    "    pass\n",
    "\n",
    "\n",
    "def password_validation(password, min_length=8,\n",
    "                        possible_chars='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',\n",
    "                        at_least_one=str.isdigit):\n",
    "    if not isinstance(password, str):\n",
    "        raise TypeError\n",
    "    if len(password) < min_length:\n",
    "        raise MinLengthError\n",
    "    if any(i not in possible_chars for i in password):\n",
    "        raise PossibleCharError\n",
    "    if not any(map(at_least_one, password)):\n",
    "        raise NeedCharError\n",
    "    return hashlib.sha256(password.encode()).hexdigest()"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
